[gd_scene load_steps=6 format=2]

[ext_resource path="res://UI/HUD.gd" type="Script" id=1]

[sub_resource type="Shader" id=3]
code = "/*
	Floating Bubbles by PmkExpert
	Create floating and colliding bubbles using worley and color them with a gradient

	MIT License
*/

shader_type canvas_item;

uniform float speed = .5; //How fast the bubbles move
uniform sampler2D gradient; //The gradient texture used to color the bubbles; if it's repeated, it should start and end with the same color
uniform vec4 background_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform vec2 grid_vec = vec2(2.0, 2.0); //How to repeat the gradient
uniform vec2 grid_bubbles = vec2(20.0, 10.0); //How many bubbles; can also make them oval

vec2 random(vec2 uv) {
	return vec2(fract(sin(dot(uv.xy,
		vec2(12.9898,78.233))) * 43758.5453123));
}

float worley(vec2 uv, float columns, float rows) {
	
	vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 point = random(index_uv + neighbor);
			point = vec2( cos(TIME * point.x * speed), sin(TIME * point.y * speed) ) * 0.5 + 0.5;
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	
	return minimum_dist;
}

vec2 grid(vec2 uv, float columns, float rows){
	return fract(vec2(uv.x * columns, uv.y * rows));
}

void fragment() {
	vec2 repeat = grid(SCREEN_UV, grid_vec.x, grid_vec.y); //Divide in grid, used to repeat the gradient
	float worley = worley(SCREEN_UV, grid_bubbles.x, grid_bubbles.y); //Create bubbles
	vec4 multi_color = texture(gradient, vec2(repeat.y, worley)); //Use gradient colors; you can change to repeat.x for a horizontal repeat
	//You can change the float values here to modify the bubbles; don't ask for a mathematical explanation, I don't know
	COLOR.rgb = mix(vec3(worley) * multi_color.rgb * 3.0, background_color.rgb , smoothstep(0.4, 0.5, worley * 1.5)); //The weight controls the bubbles' rim and size
	COLOR.a = texture(TEXTURE, UV).a; //Preserve the original texture's transparency
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/speed = 0.5
shader_param/background_color = Color( 0, 0, 0, 1 )
shader_param/grid_vec = Vector2( 2, 2 )
shader_param/grid_bubbles = Vector2( 20, 10 )

[sub_resource type="StyleBoxFlat" id=1]
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="StyleBoxEmpty" id=2]

[node name="HUD" type="Control"]
pause_mode = 2
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 1 )

[node name="Background" type="ColorRect" parent="."]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -29.0
color = Color( 0, 0, 0, 0.25098 )

[node name="Background2" type="ColorRect" parent="."]
anchor_right = 1.0
margin_top = 10.0
margin_bottom = 50.0
color = Color( 0, 0, 0, 0.25098 )

[node name="Score" type="Label" parent="."]
margin_left = 20.0
margin_right = 220.0
margin_bottom = 60.0
text = "Score: "
valign = 1

[node name="Time" type="Label" parent="."]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -220.0
margin_right = -20.0
margin_bottom = 60.0
text = "Time: "
align = 2
valign = 1

[node name="Fever" type="ProgressBar" parent="."]
material = SubResource( 4 )
anchor_left = 0.5
anchor_right = 0.5
margin_left = -200.0
margin_top = 20.0
margin_right = 200.0
margin_bottom = 45.0
rect_min_size = Vector2( 400, 25 )
custom_styles/fg = SubResource( 1 )
custom_styles/bg = SubResource( 2 )
percent_visible = false

[node name="Indicator_Container" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Timer" type="Timer" parent="."]
autostart = true

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
